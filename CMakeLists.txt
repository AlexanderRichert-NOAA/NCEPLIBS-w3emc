cmake_minimum_required(VERSION 2.6)
project(w3emc)
set(VERSION v2.2.0)
enable_language (Fortran)
if (NOT CMAKE_BUILD_TYPE)
    set (CMAKE_BUILD_TYPE RELEASE CACHE STRING
        "Choose the type of build, options are: PRODUCTION Debug Release."
        FORCE)
endif()
if(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
  message("setting intel true")
  set(IntelComp true )
elseif(CMAKE_CXX_COMPILER_ID MATCHES "GNU*" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang*")
  set(GNUComp true )
elseif(CMAKE_CXX_COMPILER_ID MATCHES "pgc*")
  set(PGIComp true )
endif()
MESSAGE(${CMAKE_CURRENT_SOURCE_DIR})
STRING(COMPARE EQUAL ${CMAKE_BUILD_TYPE} "RelWithDebInfo" BUILD_RELEASE)
STRING(COMPARE EQUAL ${CMAKE_BUILD_TYPE} "RELEASE" BUILD_RELEASE)
STRING(COMPARE EQUAL ${CMAKE_BUILD_TYPE} "PRODUCTION" BUILD_PRODUCTION)
STRING(COMPARE EQUAL ${CMAKE_BUILD_TYPE} "DEGUG" BUILD_DEBUG)
set( EXTRA_INCLUDE ${CMAKE_ADDITIONAL_INCLUDE_PATH} )
option(EXTRA_INCLUDE "Extra include path" "")
if( (BUILD_RELEASE) OR (BUILD_PRODUCTION) )
  if(IntelComp)
    message("setting intel flags")
    set(CMAKE_Fortran_d_FLAGS "-r8   -O2  -g  -traceback  -fixed -I${EXTRA_INCLUDE} " CACHE INTERNAL "" )
    set(CMAKE_Fortran_8_FLAGS "-r8 -i8 -O2  -g  -traceback  -fixed -I${EXTRA_INCLUDE} " CACHE INTERNAL "" )
    set(CMAKE_Fortran_4_FLAGS "-O2  -g  -traceback  -fixed -I${EXTRA_INCLUDE}" CACHE INTERNAL "" )
  elseif(GNUComp)
    message("setting gnu flags")
    set(CMAKE_Fortran_d_FLAGS "-fno-range-check -O2 -g -fbacktrace -ffixed-form -ggdb -fdefault-real-8 -funroll-loops -I${EXTRA_INCLUDE} " CACHE INTERNAL "" )
    set(CMAKE_Fortran_8_FLAGS "-fno-range-check -O2 -g -fbacktrace -ffixed-form -ggdb -fdefault-integer-8 -fdefault-real-8 -funroll-loops -I${EXTRA_INCLUDE} " CACHE INTERNAL "" )
    set(CMAKE_Fortran_4_FLAGS "-fno-range-check -O2 -g -fbacktrace -ffixed-form -ggdb -funroll-loops -I${EXTRA_INCLUDE} " CACHE INTERNAL "" )
  else()
    message("unknown compiler!")
    exit()
  endif()
endif()
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
find_package(NEMSIO)
find_package(SIGIO)
include_directories( ${NEMSIO_INC} ${SIGIO_INC} )
add_subdirectory(4byte) 
add_subdirectory(8byte) 
add_subdirectory(double) 
